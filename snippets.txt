# Arithmetic Operators:
# Addition:          3 + 2
# Subtraction:       3 - 2
# Multiplication:    3 * 2
# Division:          3 / 2
# Floor Division:    3 // 2
# Exponent:          3 ** 2
# Modulus:           3 % 2


# Comparison:
# Equal:             3 == 2
# Not Equal:         3 != 2
# Greater Than:      3 > 2
# Less Than:         3 < 2
# Greater or Equal:  3 >= 2
# Less or Equal:     3 <= 2

some booleans operations that we can use
# and
# or
# not

# Comparison:
# Equal:             ==
# Not Equal:         !=
# Greater Than:      >
# Less Than:         <
# Greater or Equal:  >=
# Less or Equal:     <=
# Object Identity:   is

Types :-
- int, normal integers like, -2,3,0 etc
- float, decimal/fractional values like, -0.4, 9.83 etc.


Incrementing :-
num = 1
num += 1  # same as num = num + 1
# the "+" in += can be replaced by any other arithmetic Operators
# eg num *= 2, now num = num * 2 = 2. Similarly all other arithmetics.

Miscellaneous :-
- Add parentheses () for enforcing precedence.
eg: 3 * (2+1) = 9
- you can use type(variable_or_value) to find the value's data type.


# Empty lists
empty _list = []
empty _list = list()

# Empty Tuples
empty_tuple = ()
empty_tuple =  tuple()

#Empty Sets
empty_set = {} # This isn't right! It's a dict
empty_set =  set()


# Number of days per month. First value placeholder for indexing purposes.
month_days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

def is_leap(year):
    """Return True for leap years, False for non-leap years."""

    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)

def days_in_month(year, month):
    """Return number of days in that month in that year."""

    # year 2017
    # month 2
    if not 1 <= month <= 12:
        return 'Invalid Month'
    if month == 2 and is_leap(year):
        return 29

       return month_days[month]

print(days_in_month(2017, 2)

